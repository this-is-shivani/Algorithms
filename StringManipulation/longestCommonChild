import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'commonChild' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. STRING s1
     *  2. STRING s2
     */
     
    public static int max(int a,int b)
    {
        if(a>=b)
            return a;
        else
            return b;
    }

    public static int commonChild(String X, String Y, int m, int n) {
    // Write your code here
    // return if the end of either sequence is reached
        if (m == 0 || n == 0) {
            return 0;
        }
 
        // if the last character of `X` and `Y` matches
        if (X.charAt(m - 1) == Y.charAt(n - 1)) {
            return commonChild(X, Y, m - 1, n - 1) + 1;
        }
 
        // otherwise, if the last character of `X` and `Y` don't match
        return max(commonChild(X, Y, m, n - 1), commonChild(X, Y, m - 1, n));
    
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s1 = bufferedReader.readLine();

        String s2 = bufferedReader.readLine();

        int result = Result.commonChild(s1, s2, s1.length(), s2.length());

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
